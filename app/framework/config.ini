
; Nerb Application Framework
; Nerb System Configuration file
;
; LICENSE
;
; This source file is subject to the license that is bundled
;
;  @category  Nerb
;  @package  Nerb
;  @author  Dexter Oddwick <dexter@oddwick.com>
;  @copyright  Copyright ï¿½2017 Oddwick Industries, Ltd. (https:;www.oddwick.com)
;  @license  https:;www.oddwick.com/docs/license
;
;
;
;
;  all of the following settings will be converted to uppercase constants when parsed

[Nerb]



[Files]
; The folder location for Nerb modules - idealy APP_PATH / FRAMEWORK / modules 
; the constant FRAMEWORK *must* be defined otherwise none of this will work
;
; define framework for working directories
config = FRAMEWORK "/config"
modules = FRAMEWORK "/modules" 
controllers = APP_PATH "/controllers"
pages = APP_PATH "/public/pages"

; Whether or not to autoload classes. when true, this flag autoloads ALL classes globally 
autoload = false 




[Error_logging]
; Catches all exceptions and throws NerbError
catch_exceptions = false

; Catches all errors and sets default error handler to Nerb::error_handler() for handling
catch_errors = true 

; The complete path is given, otherwise 
; it will be masked with APP_PATH to give a relative path for security 
show_full_path = false 

; flag if set logs all errors and warnings to a log file
use_error_logging = true 
log_all_errors = true 
log_all_warnings = true 
log_all_notice = false 

; location of the error log file, idealy /app/log
error_log = APP_PATH "/log/error.log" 



;---------------------------------------------------------------------------------------------------------------------------------------------------
;
;  MODULE SPECIFIC SETTINGS
;
;---------------------------------------------------------------------------------------------------------------------------------------------------

[NerbError]

; ERROR_STRICT 
; [0|1|2] 
; 0: allow class redefinition
; 1: throw errors 
; 2: shows debug and trace info 
;
error_strict = 0


; show trace info when inspecting variables 
show_trace = false

; [0|1|2] flag for how much information is displayed when an error is thrown 
;  
; 	0: simple error (for production environments)
; 	1: show detail error
; 	2: shows verbose debug and trace info with full paths
;
error_level = 2 

; BOOL: TRUE - log errors into a log file
error_logging = false


; BOOL: TRUE - log ignores keys that do not exist. throws error on false
ignore_invalid_keys = true 





[NerbController]

; url mode: [keyword |rest | qsa | key-value] - keyword /node/some-keyword-values | key-pair /key/value/key/value | restful urls /query/x/ | qsa urls (.php?query=x) 
url_mode = "rest"
default_file_extension = "php" 
keyword_separator = "-" 

; this hides your database structure when enabled by returning a hidden id or value for of each element 
; if defined rather than having the value in plain sight
; for example:
;	yoursite.com/controller/node/key/value 
; can be written as:
;	yoursite.com/controller/node/key/value_name
; and will return [value] instead of value_name when key is called 
structure_masking = true

; Sends back to default controller if controller not found otherwise error is thrown
default_redirect = true 




[NerbUser]

; [session|cookie]  session is only authorized for the length of the session and cookie uses SESSION_EXPIRES for length
session_type = "cookie"

; 3600*24*7 ( 1 week ) if using cookies
session_expires = 604800

; [file|db|both]
log_attempts = "both"  
access_log = APP_PATH "/log/access.log" 
access_log_table = "access_log" 
create_token_table = true 
token_table = "auth_tokens" 






?>